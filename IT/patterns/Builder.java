/**
 * https://refactoring.guru/ru/design-patterns/builder
 * https://refactoring.guru/ru/design-patterns/builder/java/example
 *
 * Цель
 *
 * Отделить конструирование сложного объекта от его представления таким
 * образом, чтобы в результате одного и того же конструирования мы могли
 * получать разные представления
 *
 * Для чего
 *
 * Для создания различных объектов из одного набора данных
 * Позволяет избавиться от большого количества конструкторов и большого
 * количества параметров конструктора
 *
 * Пример использования
 *
 * - порядок создания сложного объекта не должен зависеть от того, из каких
 *   чатей состоит объект и того, как эти объекты взаимодействуют
 * - процесс конструирования объекта должен предоставлять различные
 *   представления объекта, который мы конструируем
 *
 * Паттерн Builder предлагает вынести конструирование объекта за пределы его
 * собственного класса, поручив это дело отдельным объектам,
 * называемым строителями.
 *
 * Паттерн предлагает разбить процесс создания объекта на отдельные шаги.
 * Чтобы создать объект нужно поочередно вызывать методы строителя. Причем
 * не нужно запускать все шаги, а только те, что нужны для создания объекта.
 *
 * Можнго выделить вызов методов строителя в отдельный класс, называемый
 * директор. В этом случае порядок шагов создания объекта будет задавать
 * директор.
 */